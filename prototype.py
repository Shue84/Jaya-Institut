# -*- coding: utf-8 -*-
"""prototype.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8Yyh_dOrBrk3L_TVlxVsotAexLU0BDC
"""

import joblib
import numpy as np
import pandas as pd

encoder_Course_Marital_status_Previous_qualification = joblib.load('/content/model/onehot_encoder.joblib')
encoder_Daytime_evening_attendance = joblib.load('/content/model/encoder_Daytime_evening_attendance.joblib')
encoder_Fathers_occupation = joblib.load('/content/model/encoder_Fathers_occupation.joblib')
encoder_Fathers_qualification = joblib.load('/content/model/encoder_Fathers_qualification.joblib')
encoder_Gender = joblib.load('/content/model/encoder_Gender.joblib')
encoder_Mothers_occupation = joblib.load('/content/model/encoder_Mothers_occupation.joblib')
encoder_Mothers_qualification = joblib.load('/content/model/encoder_Mothers_qualification.joblib')
encoder_Scholarship_holder = joblib.load('/content/model/encoder_Scholarship_holder.joblib')
pca_1 = joblib.load('/content/model/pca_1.joblib')
scaler_Age_at_enrollment = joblib.load('/content/model/scaler_Age_at_enrollment.joblib')
scaler_Curricular_units_1st_sem_approved = joblib.load('/content/model/scaler_Curricular_units_1st_sem_approved.joblib')
scaler_Curricular_units_1st_sem_grade = joblib.load('/content/model/scaler_Curricular_units_1st_sem_grade.joblib')
scaler_Curricular_units_2nd_sem_approved = joblib.load('/content/model/scaler_Curricular_units_2nd_sem_approved.joblib')
scaler_Curricular_units_2nd_sem_grade = joblib.load('/content/model/scaler_Curricular_units_2nd_sem_grade.joblib')
scaler_Previous_qualification_grade = joblib.load('/content/model/scaler_Previous_qualification_grade.joblib')

pca_numerical_columns = [
    'Age_at_enrollment',
    'Curricular_units_1st_sem_approved',
    'Curricular_units_1st_sem_grade',
    'Curricular_units_2nd_sem_approved',
    'Curricular_units_2nd_sem_grade',
    'Previous_qualification_grade'
]

def data_preprocessing(data):
    """Preprocessing data

    Args:
        data (Pandas DataFrame): Dataframe that contain all the data to make prediction

    return:
        Pandas DataFrame: Dataframe that contain all the preprocessed data
    """
    data = data.copy()
    df = pd.DataFrame()

    df['Course'] = encoder_Course.transform(data['Course'])
    df['Daytime/evening attendance'] = encoder_Daytime_evening_attendance.transform(data['Daytime/evening attendance'])
    df['Fathers_occupation'] = encoder_Fathers_occupation.transform(data['Fathers_occupation'])
    df['Fathers_qualification'] = encoder_Fathers_qualification.transform(data['Fathers_qualification'])
    df['Gender'] = encoder_Gender.transform(data['Gender'])
    df['Marital_status'] = encoder_Marital_status.transform(data['Marital_status'])
    df['Mothers_occupation'] = encoder_Mothers_occupation.transform(data['Mothers_occupation'])
    df['Mothers_qualification'] = encoder_Mothers_qualification.transform(data['Mothers_qualification'])
    df['Previous_qualification'] = encoder_Previous_qualification.transform(data['Previous_qualification'])
    df['Scholarship_holder'] = encoder_Scholarship_holder.transform(data['Scholarship_holder'])

    # PCA
    data['Age_at_enrollment'] = scaler_Age_at_enrollment.transform(np.asarray(data['Age_at_enrollment']).reshape(-1,1))[0]
    data['Curricular_units_1st_sem_approved'] = scaler_Curricular_units_1st_sem_approved.transform(np.asarray(data['Curricular_units_1st_sem_approved']).reshape(-1,1))[0]
    data['Curricular_units_1st_sem_grade'] = scaler_Curricular_units_1st_sem_grade.transform(np.asarray(data['Curricular_units_1st_sem_grade']).reshape(-1,1))[0]
    data['Curricular_units_2nd_sem_approved'] = scaler_Curricular_units_2nd_sem_approved.transform(np.asarray(data['Curricular_units_2nd_sem_approved']).reshape(-1,1))[0]
    data['Curricular_units_2nd_sem_grade'] = scaler_Curricular_units_2nd_sem_grade.transform(np.asarray(data['Curricular_units_2nd_sem_grade']).reshape(-1,1))[0]
    data['Previous_qualification_grade'] = scaler_Previous_qualification_grade.transform(np.asarray(data['Previous_qualification_grade']).reshape(-1,1))[0]
    df[pca_numerical_columns] = pca_1.transform(data[pca_numerical_columns])

    return df

import joblib

model = joblib.load("/content/model/gboost_model.joblib")
result_target = joblib.load("/content/model/encoder_target.joblib")

def prediction(data):
    """Making prediction

    Args:
        data (Pandas DataFrame): Dataframe that contain all the preprocessed data

    Returns:
        str: Prediction result (Enrolled, Graduate, or Dropout)
    """
    result = model.predict(data)
    final_result = result_target.inverse_transform(result)[0]
    return final_result

!pip install streamlit -q

import streamlit as st

col1, col2 = st.columns([1, 5])
with col1:
    st.image("https://github.com/Shue84/Jaya-Jaya/blob/main/JAYA%20JAYA.png", width=130)
with col2:
    st.header('Students Dropout Prediction (Prototype)')

# 1. Load the OneHotEncoder
onehot_encoder = joblib.load('/content/model/onehot_encoder.joblib')  # Replace with your file path

# 2. Get Feature Names (Correct Method)
feature_names = onehot_encoder.get_feature_names_out(['Marital_status', 'Course', 'Previous_qualification'])
#This is the correct way to get the feature names.

# 3. Define Original Categorical Values
marital_status_options = ['Single', 'Married',  'Widower', 'Divorced', 'Facto Union', 'Legally separated']
course_options = ['33', '171', '8014', '9003', '9070', '9085', '9119', '9130', '9147', '9238', '9254', '9500', '9556', '9670', '9773' '9863', '9991']
qualification_options = ['1', '2', '3', '4', '5', '6', '9', '10', '12', '14', '15', '19', '38', '39', '40', '42', '43']

data = pd.DataFrame()

col1, col2, col3 = st.columns(3)

with col1:
    Age_at_enrollment = int(st.number_input(label='Age_at_enrollment', value=15))
    data["Age_at_enrollment"] = Age_at_enrollment

with col2:
    Gender = st.selectbox(label='Gender', options=encoder_Gender.classes_, index=1)
    data["Gender"] = [Gender]

with col3:
    Marital_status = st.selectbox('Marital Status', options=marital_status_options)
    data["Marital_status"] = Marital_status


col1, col2, col3 = st.columns(3)

with col1:
    Course = st.selectbox('Course', options=course_options)
    data["Course"] = Course

with col2:
    Daytime_evening_attendance = st.selectbox(label='Daytime_evening_attendance', options=encoder_Daytime_evening_attendance.classes_, index=1)
    data["Daytime_evening_attendance"] = Daytime_evening_attendance

with col3:
    Scholarship_holder = st.selectbox(label='Scholarship_holder', options=encoder_Scholarship_holder.classes_, index=1)
    data["Scholarship_holder"] = Scholarship_holder


col1, col2, col3, col4 = st.columns(4)

with col1:
    num_options = len(encoder_Fathers_qualification.classes_)
    index = min(28, num_options - 1)
    Fathers_qualification = st.selectbox(label='Fathers_qualification', options=encoder_Fathers_qualification.classes_, index=index)
    data["Fathers_qualification"] = Fathers_qualification

with col2:
    num_options = len(encoder_Mothers_qualification.classes_)
    index = min(28, num_options - 1)
    Mothers_qualification = st.selectbox(label='Mothers_qualification', options=encoder_Mothers_qualification.classes_, index=index)
    data["Mothers_qualification"] = Mothers_qualification

with col3:
    num_options = len(encoder_Fathers_occupation.classes_)
    index = min(31, num_options - 1)
    Fathers_occupation = st.selectbox(label='Fathers_occupation', options=encoder_Fathers_occupation.classes_, index=index)
    data["Fathers_occupation"] = Fathers_occupation

with col4:
    num_options = len(encoder_Mothers_occupation.classes_)
    index = min(31, num_options - 1)
    Mothers_occupation = st.selectbox(label='Mothers_occupation', options=encoder_Mothers_occupation.classes_, index=index)
    data["Mothers_occupation"] = Mothers_occupation

col1, col2 = st.columns(2)

with col1:
    Previous_qualification = st.selectbox('Previous Qualification', options=qualification_options)
    data["Previous_qualification"] = Previous_qualification

with col2:
    Previous_qualification_grade = int(st.number_input(label='Previous_qualification_grade', value=0))
    data["Previous_qualification_grade"] = Previous_qualification_grade


col1, col2 = st.columns(2)

with col1:
    Curriculum_units_1st_sem_approved = int(st.number_input(label='Curriculum_units_1st_sem_approved', value=0))
    data["Curriculum_units_1st_sem_approved"] = Curriculum_units_1st_sem_approved

with col2:
    Curriculum_units_2nd_sem_approved = int(st.number_input(label='Curriculum_units_2nd_sem_approved', value=0))
    data["Curriculum_units_2nd_sem_approved"] = Curriculum_units_2nd_sem_approved


col1, col2 = st.columns(2)

with col1:
    Curriculum_units_1st_sem_grade = int(st.number_input(label='Curriculum_units_1st_sem_grade', value=0))
    data["Curriculum_units_1st_sem_grade"] = Curriculum_units_1st_sem_grade

with col2:
    Curriculum_units_2nd_sem_grade = int(st.number_input(label='Curriculum_units_2nd_sem_grade', value=0))
    data["Curriculum_units_2nd_sem_grade"] = Curriculum_units_2nd_sem_grade

with st.expander("View the Raw Data"):
    st.dataframe(data=data, width=800, height=10)

if st.button('Predict'):
    new_data = data_preprocessing(data=data)
    with st.expander("View the Preprocessed Data"):
        st.dataframe(data=new_data, width=800, height=10)
    st.write("Status: {}".format(prediction(new_data)))