# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-AXhtEGAwMbHZ61BcOMmMV95Hurpy9o
"""

import streamlit as st
import pandas as pd
import joblib
from data_preprocessing import data_preprocessing, onehot_encoder, encoder_Daytime_evening_attendance, encoder_Fathers_occupation, encoder_Fathers_qualification, encoder_Gender, encoder_Mothers_occupation, encoder_Mothers_qualification, encoder_Scholarship_holder
from prediction import prediction

col1, col2 = st.columns([1, 5])
with col1:
    st.image('JAYA JAYA.png', width=130)
with col2:
    st.header('Students Dropout Prediction (Prototype)')

# Initialize dictionary to collect user input
input_dict = {}

# Gender mapping
gender_map = {0: 'Female', 1: 'Male'}
gender_reverse_map = {v: k for k, v in gender_map.items()}

# Attendance and scholarship
daytime_evening_map = {0: 'Evening', 1: 'Daytime'}
daytime_evening_reverse_map = {v: k for k, v in daytime_evening_map.items()}

scholarship_map = {0: 'No', 1: 'Yes'}
scholarship_reverse_map = {v: k for k, v in scholarship_map.items()}

# Marital status and course options
marital_status_options = ['Single', 'Married', 'Widower', 'Divorced', 'Facto Union', 'Legally separated']
course_map = {
    '33': 'Computer Science', '171': 'Law', '8014': 'Mechanical Engineering',
    '9003': 'Civil Engineering', '9070': 'Business Administration', '9085': 'Psychology',
    '9119': 'Architecture', '9130': 'Education', '9147': 'Economics', '9238': 'Nursing',
    '9254': 'Pharmacy', '9500': 'Political Science', '9556': 'Sociology', '9670': 'Mathematics',
    '9773': 'Statistics', '9863': 'Linguistics', '9991': 'Biology'
}
course_reverse_map = {v: k for k, v in course_map.items()}

# Qualification map
qualification_map = {
    '1': 'Basic Education', '2': 'Secondary Education', '3': 'Technical Course',
    '4': 'Vocational Training', '5': 'Undergraduate', '6': 'Postgraduate',
    '9': 'Foreign Qualification', '10': 'High School', '12': 'Middle School',
    '14': 'Certificate', '15': 'Other', '19': 'Online Course', '38': 'Exchange Program',
    '39': 'Adult Education', '40': 'Evening School', '42': 'Homeschooling', '43': 'No Formal Education'
}
qualification_reverse_map = {v: k for k, v in qualification_map.items()}

# Collect inputs
col1, col2, col3 = st.columns(3)
with col1:
    input_dict["Age_at_enrollment"] = int(st.number_input(label='Age at Enrollment', value=15))

with col2:
    gender_label = st.selectbox('Gender', options=list(gender_map.values()), index=1)
    input_dict["Gender"] = gender_reverse_map[gender_label]

with col3:
    input_dict["Marital_status"] = st.selectbox('Marital Status', options=marital_status_options)

col1, col2, col3 = st.columns(3)
with col1:
    course_label = st.selectbox('Course', list(course_map.values()))
    input_dict["Course"] = course_reverse_map[course_label]

with col2:
    attendance_label = st.selectbox('Daytime or Evening Attendance', list(daytime_evening_map.values()), index=1)
    input_dict["Daytime_evening_attendance"] = daytime_evening_reverse_map[attendance_label]

with col3:
    scholarship_label = st.selectbox('Scholarship Holder', list(scholarship_map.values()), index=1)
    input_dict["Scholarship_holder"] = scholarship_reverse_map[scholarship_label]

col1, col2 = st.columns(2)
with col1:
    qual_label = st.selectbox('Previous Qualification', list(qualification_map.values()))
    input_dict["Previous_qualification"] = qualification_reverse_map[qual_label]

with col2:
    input_dict["Previous_qualification_grade"] = int(st.number_input(label='Previous Qualification Grade', value=0))

col1, col2 = st.columns(2)
with col1:
    input_dict["Curricular_units_1st_sem_approved"] = int(st.number_input(label='1st Sem Units Approved', value=0))
with col2:
    input_dict["Curricular_units_2nd_sem_approved"] = int(st.number_input(label='2nd Sem Units Approved', value=0))

col1, col2 = st.columns(2)
with col1:
    input_dict["Curricular_units_1st_sem_grade"] = int(st.number_input(label='1st Sem Grade', value=0))
with col2:
    input_dict["Curricular_units_2nd_sem_grade"] = int(st.number_input(label='2nd Sem Grade', value=0))

# Convert to DataFrame
data = pd.DataFrame([input_dict])

with st.expander("View the Raw Data"):
    st.dataframe(data, width=800)

if st.button('Predict'):
    new_data = data_preprocessing(data)
    with st.expander("View the Preprocessed Data"):
        st.dataframe(new_data, width=800)

    result = prediction(new_data)
    status_map = {
        0: 'Enrolled',
        1: 'Graduate',
        2: 'Dropout',
        '0': 'Enrolled',
        '1': 'Graduate',
        '2': 'Dropout'
    }
    readable_status = status_map.get(result, result)
    st.write(f"Status: {readable_status}")
